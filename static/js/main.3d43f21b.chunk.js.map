{"version":3,"sources":["redux/UserService.ts","components/PostList.tsx","components/AlbumModal.tsx","components/UserList.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["userAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","build","fetchAllUsers","query","url","fetchAllPosts","fetchAllAlbums","useFetchAllAlbumsQuery","useFetchAllPostsQuery","useFetchAllUsersQuery","PostList","posts","data","userId","useParams","userPosts","filter","post","className","map","id","title","AlbumModal","albums","userID","useState","isUserLoaded","setIsUserLoaded","userAlbums","album","to","type","onClick","Fragment","UserList","users","user","name","target","toString","App","path","element","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"+MAIaA,EAAUC,YAAU,CAC/BC,YAAa,UACbC,UAAWC,YAAe,CAAEC,QAAS,yCACrCC,UAAW,SAACC,GAAD,MAAY,CACrBC,cAAeD,EAAME,MAAoB,CACvCA,MAAO,iBAAO,CACZC,IAAK,aAGTC,cAAeJ,EAAME,MAAoB,CACvCA,MAAO,iBAAO,CACZC,IAAK,aAGTE,eAAgBL,EAAME,MAAqB,CACzCA,MAAO,iBAAO,CACZC,IAAK,kBAMEG,EAAyEb,EAAzEa,uBAAwBC,EAAiDd,EAAjDc,sBAAuBC,EAA0Bf,EAA1Be,sB,OCG/CC,EAxBM,WACnB,IAAcC,EAAUH,IAAhBI,KACAC,EAAWC,cAAXD,OAEFE,EAAS,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAOK,QAAO,SAAAC,GAC9B,OAAKJ,EAIEI,EAAKJ,UAAYA,EAHf,QAMX,OACE,8BACE,sBAAKK,UAAU,cAAf,UACE,kDAAqBL,KACpBE,GAAaA,EAAUI,KAAI,SAAAF,GAAI,OAC9B,oBAAiBC,UAAU,aAA3B,UAAyCD,EAAKG,GAA9C,KAAoDH,EAAKI,QAAjDJ,EAAKG,a,gCCmCRE,EAnDQ,WACrB,IAAcC,EAAWhB,IAAjBK,KACAY,EAAWV,cAAXU,OACR,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAU,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAQP,QAAO,SAAAa,GAChC,OAAKL,EAIEK,EAAMhB,UAAYW,EAHhB,QAMX,OACE,sBAAKN,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBACdQ,GAEG,mCACE,sBAAKR,UAAU,aAAf,UACE,kDAAqBM,KACrB,cAAC,IAAD,CAASM,GAAG,IAAZ,SACE,wBACEC,KAAK,SACLb,UAAU,SACV,UAAQ,cACRc,QAAS,WACPL,GAAgB,QARxB,OAaGC,QAbH,IAaGA,OAbH,EAaGA,EAAYT,KAAI,SAAAU,GAAK,OACpB,cAAC,IAAMI,SAAP,UACE,wBAAQf,UAAU,kBAAlB,SACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,UAIGW,EAAMT,GAJT,KAIeS,EAAMR,YANJQ,EAAMT,gBCS5Bc,EA1CM,WACnB,IAAcC,EAAU1B,IAAhBG,KAER,OACE,sBAAKM,UAAU,aAAf,UACE,oBAAIA,UAAU,QAAd,oBACCiB,GAASA,EAAMhB,KAAI,SAAAiB,GAAI,OAEtB,cADA,CACA,sBAEE,8BACGA,EAAKhB,GADR,IAGGgB,EAAKC,KACL,SAJKD,EAAKhB,IAMb,8BACE,cAAC,IAAD,CAASkB,OAAO,SAASR,GAAIM,EAAKhB,GAAGmB,WAArC,SACE,wBACER,KAAK,SACLb,UAAU,YACVc,QAAS,kBAAM,cAAC,EAAD,KAHjB,qBAQF,cAAC,IAAD,CAASF,GAAE,kBAAaM,EAAKhB,GAAGmB,YAAhC,SACE,wBACER,KAAK,SACLb,UAAU,aACVc,QAAS,kBAAM,cAAC,EAAD,KAHjB,mCCvBDQ,EAAU,WACrB,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAU,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,QAAU,cAAC,EAAD,Y,eCblCC,EAAQC,YAAe,CAClCC,QAAQ,eACLnD,EAAQE,YAAcF,EAAQmD,WCEnCC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.3d43f21b.chunk.js","sourcesContent":["/* eslint-disable max-len */\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Album, Post, User } from '../react-app-env';\n\nexport const userAPI = createApi({\n  reducerPath: 'userAPI',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),\n  endpoints: (build) => ({\n    fetchAllUsers: build.query<User[], void>({\n      query: () => ({\n        url: '/users',\n      }),\n    }),\n    fetchAllPosts: build.query<Post[], void>({\n      query: () => ({\n        url: '/posts',\n      }),\n    }),\n    fetchAllAlbums: build.query<Album[], void>({\n      query: () => ({\n        url: '/albums',\n      }),\n    }),\n  }),\n});\n\nexport const { useFetchAllAlbumsQuery, useFetchAllPostsQuery, useFetchAllUsersQuery } = userAPI;\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetchAllPostsQuery } from '../redux/UserService';\n\nconst PostList: FC = () => {\n  const { data: posts } = useFetchAllPostsQuery();\n  const { userId } = useParams();\n\n  const userPosts = posts?.filter(post => {\n    if (!userId) {\n      return null;\n    }\n\n    return post.userId === +userId;\n  });\n\n  return (\n    <div>\n      <div className=\"posts__list\">\n        <h2>Posts of User # {userId}</h2>\n        {userPosts && userPosts.map(post => (\n          <p key={post.id} className=\"post__item\">{post.id}. {post.title}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostList;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { FC, useState } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { useFetchAllAlbumsQuery } from '../redux/UserService';\n\nconst AlbumModal: FC = () => {\n  const { data: albums } = useFetchAllAlbumsQuery();\n  const { userID } = useParams();\n  const [isUserLoaded, setIsUserLoaded] = useState(true);\n\n  const userAlbums = albums?.filter(album => {\n    if (!userID) {\n      return null;\n    }\n\n    return album.userId === +userID;\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isUserLoaded\n        && (\n          <>\n            <div className=\"modal-card\">\n              <h2>Albums of User #{userID}</h2>\n              <NavLink to=\"/\">\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => {\n                    setIsUserLoaded(false);\n                  }}\n                />\n              </NavLink>\n\n              {userAlbums?.map(album => (\n                <React.Fragment key={album.id}>\n                  <header className=\"modal-card-head\">\n                    <div\n                      className=\"modal-card-title has-text-weight-medium\"\n                      data-cy=\"modal-header\"\n                    >\n                      {album.id}. {album.title}\n                    </div>\n                  </header>\n                </React.Fragment>\n              ))}\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default AlbumModal;\n","import { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useFetchAllUsersQuery } from '../redux/UserService';\nimport AlbumModal from './AlbumModal';\nimport PostList from './PostList';\n\nconst UserList: FC = () => {\n  const { data: users } = useFetchAllUsersQuery();\n\n  return (\n    <div className=\"user__list\">\n      <h1 className=\"title\">Users:</h1>\n      {users && users.map(user => (\n        // eslint-disable-next-line\n        <>\n          {/* eslint-disable-next-line react/jsx-one-expression-per-line */}\n          <p key={user.id}>\n            {user.id}\n            .\n            {user.name}\n            {'    '}\n          </p>\n          <p>\n            <NavLink target=\"_blank\" to={user.id.toString()}>\n              <button\n                type=\"button\"\n                className=\"posts_btn\"\n                onClick={() => <PostList />}\n              >\n                Posts\n              </button>\n            </NavLink>\n            <NavLink to={`/albums/${user.id.toString()}`}>\n              <button\n                type=\"button\"\n                className=\"albums_btn\"\n                onClick={() => <AlbumModal />}\n              >\n                Albums\n              </button>\n            </NavLink>\n          </p>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default UserList;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport 'bulma/css/bulma.css';\nimport { FC } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport PostList from './components/PostList';\nimport './App.scss';\nimport UserList from './components/UserList';\nimport AlbumModal from './components/AlbumModal';\n\nexport const App: FC = () => {\n  return (\n    <>\n      <Routes>\n        <Route path=\"/\" element={<UserList />} />\n        <Route path=\":userId\" element={(<PostList />)} />\n        <Route path=\"albums/:userID\" element={(<AlbumModal />)} />\n      </Routes>\n    </>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { userAPI } from './UserService';\n\nexport const store = configureStore({\n  reducer: {\n    [userAPI.reducerPath]: userAPI.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}